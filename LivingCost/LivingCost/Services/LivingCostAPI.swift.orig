//
//  LivingCostAPI.swift
//  LivingCost
//
//  Created by rafael reis on 20/08/16.
//  Copyright Â© 2016 Nexer. All rights reserved.
//

import Foundation
import Alamofire
import SwiftyJSON

//  google JSON api + hatena bookmark hotentry

let domain = "https://nomadlist.com/api/v2/"
let imageDomain = "https://nomadlist.com"

final class LivingCostAPI{
    
    
<<<<<<< HEAD
    class func getCities(callback: ([City]) -> Void){
        
        LivingCostAPI.getData { (data:JSON?) in
            guard let data = data else { return }
            
            if let jsonResult = data["result"].array {
                var cities = [City]()
                for result in jsonResult {
                    let city = City()
                    city.name = result["info"]["city"]["name"].string!
                    city.country = result["info"]["country"]["name"].string!
                    city.shortTerm = result["cost"]["shortTerm"]["USD"].double!
                    city.photoURL = imageDomain + result["media"]["image"]["500"].string!
                    
                    cities.append(city)
                }
                callback(cities)
            }
            //            print(data)
        }

    }
=======
//    class func getCities() -> [City]{
//        LivingCostAPI.getData { (data:JSON?) in
//            guard let data = data else { return }
//            
//            if let jsonResult = data["result"].array {
//                var cities = [City]()
//                
//                for result in jsonResult {
//                    let city = City()
//                    city.name = result["info"]["city"]["name"].string!
//                    
//                    cities.append(city)
//                }
//            }
////            print(data)
//            return cities
//        }
//    }
>>>>>>> 56adeb6789ab731a79559745de356bf999322a2f
    
    
    private class func getData(callback: (JSON?) -> ()) {
        let url = domain + "list/cities"
        
        Alamofire.request(.GET, url, parameters: nil)
            .responseJSON { response in
                switch response.result {
                case .Success:
                    callback(JSON(response.result.value!))
                case .Failure:
                    callback(nil)
                }
        }
    }
    
    static func getMockCities() -> [City]{
        var cities = [City]()
        
        for _ in 0..<10 {
            let city = City()
            city.name = "Bangkok"
            city.country = "Thailand"
            city.shortTerm = 123.12
            city.isGoingToCompare = false
            cities.append(city)
        }
        
        return cities
    }
}

